version: 2.1

jobs:
  make-build:
    docker:
      - image: python:3.7.3-stretch

    steps:
      - checkout

      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "requirements.txt" }}
            - v1-dependencies-

      - run:
          name: Make install,lint and build
          command: |
            python3 -m venv venv
            . venv/bin/activate
            make install

      - run:
          name: run lint
          command: |
            . venv/bin/activate
            make lint

      - save_cache:
          paths:
            - ./venv
          key: v1-dependencies-{{ checksum "requirements.txt" }}

  dockerhub-upload:
    docker:
      - image: circleci/golang:1.15

    working_directory: ~/repo

    steps:
      - checkout

      - setup_remote_docker:
          version: 20.10.14

      - run:
          name: Build docker container
          command: |
            docker build --tag=$DOCKERHUB_IMAGE .
            docker image ls

      - run:
          name: Upload Docker to Dockerhub
          command: |
            echo "Image Details: $DOCKER_IMAGE_NAME"
            docker login -u="$DOCKER_USER" -p="$DOCKER_PASSWORD"
            docker tag $DOCKERHUB_IMAGE $DOCKER_USER/$DOCKERHUB_IMAGE:$CIRCLE_WORKFLOW_ID
            docker push $DOCKER_USER/$DOCKERHUB_IMAGE:$CIRCLE_WORKFLOW_ID

  spin-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: yum install -y tar gzip
      - run:
          name: Setup Network for EKS Cluster
          command: |
            aws cloudformation deploy \
              --template-file Cloudformation/SetupClusterNetwork.yml \
              --tags project=${ENVIRONMENT_TAG}-project \
              --stack-name "${ENVIRONMENT_TAG}-eks-network" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://Cloudformation/SetupClusterNetwork-params.json
      - run:
          name: Setup EKS Cluster
          command: |
            aws cloudformation deploy \
              --template-file Cloudformation/CreateEKSCluster.yml \
              --tags project=${ENVIRONMENT_TAG}-project \
              --stack-name "${ENVIRONMENT_TAG}-eks-cluster" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://Cloudformation/CreateEKSCluster-params.json \
              --capabilities CAPABILITY_NAMED_IAM
          no_output_timeout: 15m
      - run:
          name: Setup EKS Nodegroup
          command: |
            aws cloudformation deploy \
              --template-file Cloudformation/CreateClusterNodes.yml \
              --tags project=${ENVIRONMENT_TAG}-project \
              --stack-name "${ENVIRONMENT_TAG}-eks-nodegroup" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://Cloudformation/CreateClusterNodes-params.json \
              --capabilities CAPABILITY_NAMED_IAM
      - run:
          name: Configure Nodegroup management
          command: |
            aws cloudformation deploy \
              --template-file Cloudformation/SetupClusterNodegroup.yml \
              --tags project=${ENVIRONMENT_TAG}-project \
              --stack-name "${ENVIRONMENT_TAG}-eks-management" \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides file://Cloudformation/SetupClusterNodegroup-params.json \
              --output text >> ~/DeployMessage.txt
            cat ~/DeployMessage.txt

      - run:
          name: Find IPs of setup hosts
          command: |
            echo [setup] > ~/inventory.txt
            aws ec2 describe-instances \
              --region "${AWS_DEFAULT_REGION}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=${ENVIRONMENT_TAG}-host*" \
              --output text >> ~/inventory.txt
            cat ~/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - inventory.txt
            - DeployMessage.txt

  setup-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9c:df:cb:3c:19:b8:89:ae:56:e7:d3:bf:c5:aa:ba:f1"]
      - attach_workspace:
          at: ~/
      #- run:
      #    name: Install dependencies
      #    command: |
      #      apk add --update ansible
      - run:
          name: setup management server
          command: |
            if grep -q "No changes to deploy" ~/DeployMessage.txt
              then
                cat ~/inventory.txt
                echo "Our setup hosts are already configured"
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-server.yml
              fi

  setup-cluster:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["9c:df:cb:3c:19:b8:89:ae:56:e7:d3:bf:c5:aa:ba:f1"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apk add --update ansible
      - run:
          name: Configure server
          command: |
            if grep -q "No changes to deploy" ~/DeployMessage.txt
              then
                cat ~/inventory.txt
                echo "Our setup hosts are already configured"
              else
                cat ~/inventory.txt
                cd ansible
                ansible-playbook -i ~/inventory.txt configure-cluster.yml
              fi
      - run:
          name: Pause for Loadbalacer domain to be available
          command: |
            if grep -q "No changes to deploy" ~/DeployMessage.txt
              then
                cat ~/inventory.txt
                echo "Our management instances are already configured."
              else
                cat ~/inventory.txt
                echo "Wait 60 seconds..."
                sleep 60
              fi
      - run:
          name: Fetch DNS of Loadbalancer
          command: |
            cat ~/inventory.txt
            cd ansible
            ansible-playbook -i ~/inventory.txt extract-elb-details.yml
            cat ~/elb_details.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - elb_details.txt

  


workflows:
  default:
    jobs:
      - make-build
      - dockerhub-upload:
          requires:
            - make-build
          filters:
            branches:
              only: [ main ]
      - spin-infrastructure:
          filters:
            branches:
              only: [ main ]
      - setup-infrastructure:
          requires:
            - spin-infrastructure
      - setup-cluster:
          requires:
            - setup-infrastructure
            - dockerhub-upload